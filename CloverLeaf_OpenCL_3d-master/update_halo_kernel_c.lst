PGC Version 13.5          07/18/2014  14:45:39      page 1


Switches: -list -object -noxref -nocode -debug -nosingle
          -opt 2  -inform severe   
          -noes 
          -def unix
          -def __unix
          -def __unix__
          -def linux
          -def __linux
          -def __linux__
          -def __NO_MATH_INLINES
          -def __x86_64
          -def __x86_64__
          -def __LONG_MAX__=9223372036854775807L
          -def __SIZE_TYPE__=unsigned long int
          -def __PTRDIFF_TYPE__=long int
          -def __THROW=
          -def __extension__=
          -def __amd_64__amd64__
          -def __k8
          -def __k8__
          -def __SSE__
          -def __MMX__
          -def __SSE2__
          -def __SSE3__
          -def __SSSE3__
          -def #machine(x86_64) #lint(off) #system(posix) #cpu(x86_64)
          -def __pgnu_vsn=40407
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
Filename: update_halo_kernel_c.c

(    1) /*Crown Copyright 2012 AWE.
(    2) *
(    3) * This file is part of CloverLeaf.
(    4) *
(    5) * CloverLeaf is free software: you can redistribute it and/or modify it under
(    6) * the terms of the GNU General Public License as published by the
(    7) * Free Software Foundation, either version 3 of the License, or (at your option)
(    8) * any later version.
(    9) *
(   10) * CloverLeaf is distributed in the hope that it will be useful, but
(   11) * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
(   12) * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
(   13) * details.
(   14) *
(   15) * You should have received a copy of the GNU General Public License along with
(   16) * CloverLeaf. If not, see http://www.gnu.org/licenses/. */
(   17) 
(   18) /**
(   19)  *  @brief C kernel to update the external halo cells in a chunk.
(   20)  *  @author Wayne Gaudin
(   21)  *  @details Updates halo cells for the required fields at the required depth
(   22)  *  for any halo cells that lie on an external boundary. The location and type
(   23)  *  of data governs how this is carried out. External boundaries are always
(   24)  *  reflective.
(   25)  */
(   26) 
(   27) #include <stdio.h>
(   28) #include <stdlib.h>
(   29) #include "ftocmacros.h"
(   30) #include <math.h>



PGC Version 13.5          07/18/2014  14:45:39      page 2


(   31) 
(   32) void update_halo_kernel_c_(int *xmin,int *xmax,int *ymin,int *ymax,
(   33)                         int *chunk_neighbours,
(   34)                         double *density0,
(   35)                         double *energy0,
(   36)                         double *pressure,
(   37)                         double *viscosity,
(   38)                         double *soundspeed,
(   39)                         double *density1,
(   40)                         double *energy1,
(   41)                         double *xvel0,
(   42)                         double *yvel0,
(   43)                         double *xvel1,
(   44)                         double *yvel1,
(   45)                         double *vol_flux_x,
(   46)                         double *vol_flux_y,
(   47)                         double *mass_flux_x,
(   48)                         double *mass_flux_y,
(   49)                         int *fields,
(   50)                         int *dpth)
(   51) {
(   52) 
(   53)   int x_min=*xmin;
(   54)   int x_max=*xmax;
(   55)   int y_min=*ymin;
(   56)   int y_max=*ymax;
(   57)   int depth=*dpth;
(   58) 
(   59)   /* These need to be kept consistent with the data module to avoid use statement */
(   60)   int CHUNK_LEFT=1,CHUNK_RIGHT=2,CHUNK_BOTTOM=3,CHUNK_TOP=4,EXTERNAL_FACE=-1;
(   61) 
(   62)   int FIELD_DENSITY0   = 1;
(   63)   int FIELD_DENSITY1   = 2;
(   64)   int FIELD_ENERGY0    = 3;
(   65)   int FIELD_ENERGY1    = 4;
(   66)   int FIELD_PRESSURE   = 5;
(   67)   int FIELD_VISCOSITY  = 6;
(   68)   int FIELD_SOUNDSPEED = 7;
(   69)   int FIELD_XVEL0      = 8;
(   70)   int FIELD_XVEL1      = 9;
(   71)   int FIELD_YVEL0      =10;
(   72)   int FIELD_YVEL1      =11;
(   73)   int FIELD_VOL_FLUX_X =12;
(   74)   int FIELD_VOL_FLUX_Y =13;
(   75)   int FIELD_MASS_FLUX_X=14;
(   76)   int FIELD_MASS_FLUX_Y=15;
(   77) 
(   78)   int j,k;
(   79) 
(   80)   /* Update values in external halo cells based on depth and fields requested */
(   81) 
(   82) #pragma omp parallel
(   83)  {
(   84)   if(fields[FTNREF1D(FIELD_DENSITY0,1)]==1) {
(   85)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(   86) #pragma omp for private(j,k)
(   87)       for (j=x_min-depth;j<=x_max+depth;j++) {
(   88) #pragma ivdep
(   89)         for (k=1;k<=depth;k++) {
(   90)           density0[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=density0[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];



PGC Version 13.5          07/18/2014  14:45:39      page 3


(   91) 	}
(   92)       }
(   93)     }
(   94) 
(   95)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(   96) #pragma omp for private(j,k)
(   97)       for (j=x_min-depth;j<=x_max+depth;j++) {
(   98) #pragma ivdep
(   99)         for (k=1;k<=depth;k++) {
(  100)           density0[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=density0[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-2)];
(  101) 	}
(  102)       }
(  103)     }
(  104) 
(  105)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  106) #pragma omp for private(j,k)
(  107)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  108) #pragma ivdep
(  109)         for (j=1;j<=depth;j++) {
(  110)           density0[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=density0[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  111)         }
(  112)       }
(  113)     }
(  114) 
(  115)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  116) #pragma omp for private(j,k)
(  117)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  118) #pragma ivdep
(  119)         for (j=1;j<=depth;j++) {
(  120)           density0[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=density0[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];
(  121) 	}
(  122)       }
(  123)     }
(  124)   }
(  125) 
(  126)   if(fields[FTNREF1D(FIELD_DENSITY1,1)]==1) {
(  127)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  128) #pragma omp for private(j,k)
(  129)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  130) #pragma ivdep
(  131)         for (k=1;k<=depth;k++) {
(  132)           density1[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=density1[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];
(  133) 	}
(  134)       }
(  135)     }
(  136) 
(  137)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  138) #pragma omp for private(j,k)
(  139)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  140) #pragma ivdep
(  141)         for (k=1;k<=depth;k++) {
(  142)           density1[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=density1[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-2)];
(  143) 	}
(  144)       }
(  145)     }
(  146) 
(  147)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  148) #pragma omp for private(j,k)
(  149)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  150) #pragma ivdep



PGC Version 13.5          07/18/2014  14:45:39      page 4


(  151)         for (j=1;j<=depth;j++) {
(  152)           density1[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=density1[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  153)         }
(  154)       }
(  155)     }
(  156) 
(  157)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  158) #pragma omp for private(j,k)
(  159)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  160) #pragma ivdep
(  161)         for (j=1;j<=depth;j++) {
(  162)           density1[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=density1[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];
(  163) 	}
(  164)       }
(  165)     }
(  166)   }
(  167) 
(  168)   if(fields[FTNREF1D(FIELD_ENERGY0,1)]==1) {
(  169)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  170) #pragma omp for private(j,k)
(  171)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  172) #pragma ivdep
(  173)         for (k=1;k<=depth;k++) {
(  174)           energy0[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=energy0[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];
(  175) 	}
(  176)       }
(  177)     }
(  178) 
(  179)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  180) #pragma omp for private(j,k)
(  181)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  182) #pragma ivdep
(  183)         for (k=1;k<=depth;k++) {
(  184)           energy0[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=energy0[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-2)];
(  185) 	}
(  186)       }
(  187)     }
(  188) 
(  189)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  190) #pragma omp for private(j,k)
(  191)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  192) #pragma ivdep
(  193)         for (j=1;j<=depth;j++) {
(  194)           energy0[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=energy0[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  195)         }
(  196)       }
(  197)     }
(  198) 
(  199)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  200) #pragma omp for private(j,k)
(  201)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  202) #pragma ivdep
(  203)         for (j=1;j<=depth;j++) {
(  204)           energy0[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=energy0[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];
(  205) 	}
(  206)       }
(  207)     }
(  208)   }
(  209) 
(  210)   if(fields[FTNREF1D(FIELD_ENERGY1,1)]==1) {



PGC Version 13.5          07/18/2014  14:45:39      page 5


(  211)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  212) #pragma omp for private(j,k)
(  213)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  214) #pragma ivdep
(  215)         for (k=1;k<=depth;k++) {
(  216)           energy1[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=energy1[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];
(  217) 	}
(  218)       }
(  219)     }
(  220) 
(  221)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  222) #pragma omp for private(j,k)
(  223)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  224) #pragma ivdep
(  225)         for (k=1;k<=depth;k++) {
(  226)           energy1[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=energy1[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-2)];
(  227) 	}
(  228)       }
(  229)     }
(  230) 
(  231)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  232) #pragma omp for private(j,k)
(  233)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  234) #pragma ivdep
(  235)         for (j=1;j<=depth;j++) {
(  236)           energy1[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=energy1[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  237)         }
(  238)       }
(  239)     }
(  240) 
(  241)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  242) #pragma omp for private(j,k)
(  243)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  244) #pragma ivdep
(  245)         for (j=1;j<=depth;j++) {
(  246)           energy1[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=energy1[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];
(  247) 	}
(  248)       }
(  249)     }
(  250)   }
(  251) 
(  252)   if(fields[FTNREF1D(FIELD_PRESSURE,1)]==1) {
(  253)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  254) #pragma omp for private(j,k)
(  255)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  256) #pragma ivdep
(  257)         for (k=1;k<=depth;k++) {
(  258)           pressure[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=pressure[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];
(  259) 	}
(  260)       }
(  261)     }
(  262) 
(  263)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  264) #pragma omp for private(j,k)
(  265)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  266) #pragma ivdep
(  267)         for (k=1;k<=depth;k++) {
(  268)           pressure[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=pressure[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-2)];
(  269) 	}
(  270)       }



PGC Version 13.5          07/18/2014  14:45:39      page 6


(  271)     }
(  272) 
(  273)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  274) #pragma omp for private(j,k)
(  275)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  276) #pragma ivdep
(  277)         for (j=1;j<=depth;j++) {
(  278)           pressure[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=pressure[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  279)         }
(  280)       }
(  281)     }
(  282) 
(  283)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  284) #pragma omp for private(j,k)
(  285)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  286) #pragma ivdep
(  287)         for (j=1;j<=depth;j++) {
(  288)           pressure[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=pressure[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];
(  289) 	}
(  290)       }
(  291)     }
(  292)   }
(  293) 
(  294)   if(fields[FTNREF1D(FIELD_VISCOSITY,1)]==1) {
(  295)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  296) #pragma omp for private(j,k)
(  297)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  298) #pragma ivdep
(  299)         for (k=1;k<=depth;k++) {
(  300)           viscosity[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=viscosity[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];
(  301) 	}
(  302)       }
(  303)     }
(  304) 
(  305)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  306) #pragma omp for private(j,k)
(  307)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  308) #pragma ivdep
(  309)         for (k=1;k<=depth;k++) {
(  310)           viscosity[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=viscosity[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-2)
(  311) 	}
(  312)       }
(  313)     }
(  314) 
(  315)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  316) #pragma omp for private(j,k)
(  317)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  318) #pragma ivdep
(  319)         for (j=1;j<=depth;j++) {
(  320)           viscosity[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=viscosity[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  321)         }
(  322)       }
(  323)     }
(  324) 
(  325)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  326) #pragma omp for private(j,k)
(  327)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  328) #pragma ivdep
(  329)         for (j=1;j<=depth;j++) {
(  330)           viscosity[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=viscosity[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];



PGC Version 13.5          07/18/2014  14:45:39      page 7


(  331) 	}
(  332)       }
(  333)     }
(  334)   }
(  335) 
(  336)   if(fields[FTNREF1D(FIELD_SOUNDSPEED,1)]==1) {
(  337)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  338) #pragma omp for private(j,k)
(  339)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  340) #pragma ivdep
(  341)         for (k=1;k<=depth;k++) {
(  342)           soundspeed[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=soundspeed[FTNREF2D(j  ,0+k,x_max+4,x_min-2,y_min-2)];
(  343) 	}
(  344)       }
(  345)     }
(  346) 
(  347)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  348) #pragma omp for private(j,k)
(  349)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  350) #pragma ivdep
(  351)         for (k=1;k<=depth;k++) {
(  352)           soundspeed[FTNREF2D(j  ,y_max+k,x_max+4,x_min-2,y_min-2)]=soundspeed[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_min-
(  353) 	}
(  354)       }
(  355)     }
(  356) 
(  357)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  358) #pragma omp for private(j,k)
(  359)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  360) #pragma ivdep
(  361)         for (j=1;j<=depth;j++) {
(  362)           soundspeed[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=soundspeed[FTNREF2D(0+j,k,x_max+4,x_min-2,y_min-2)];
(  363)         }
(  364)       }
(  365)     }
(  366) 
(  367)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  368) #pragma omp for private(j,k)
(  369)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  370) #pragma ivdep
(  371)         for (j=1;j<=depth;j++) {
(  372)           soundspeed[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=soundspeed[FTNREF2D(x_max+1-j,k,x_max+4,x_min-2,y_min-2)];
(  373) 	}
(  374)       }
(  375)     }
(  376)   }
(  377)   if(fields[FTNREF1D(FIELD_XVEL0,1)]==1) {
(  378)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  379) #pragma omp for private(j,k)
(  380)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  381) #pragma ivdep
(  382)         for (k=1;k<=depth;k++) {
(  383)           xvel0[FTNREF2D(j  ,1-k,x_max+5,x_min-2,y_min-2)]=xvel0[FTNREF2D(j  ,1+k,x_max+5,x_min-2,y_min-2)];
(  384) 	}
(  385)       }
(  386)     }
(  387) 
(  388)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  389) #pragma omp for private(j,k)
(  390)       for (j=x_min-depth;j<=x_max+1+depth;j++) {



PGC Version 13.5          07/18/2014  14:45:39      page 8


(  391) #pragma ivdep
(  392)         for (k=1;k<=depth;k++) {
(  393)           xvel0[FTNREF2D(j  ,y_max+1+k,x_max+5,x_min-2,y_min-2)]=xvel0[FTNREF2D(j  ,y_max+1-k,x_max+5,x_min-2,y_min-2)];
(  394) 	}
(  395)       }
(  396)     }
(  397) 
(  398)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  399) #pragma omp for private(j,k)
(  400)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  401) #pragma ivdep
(  402)         for (j=1;j<=depth;j++) {
(  403)           xvel0[FTNREF2D(1-j,k,x_max+5,x_min-2,y_min-2)]=-xvel0[FTNREF2D(1+j,k,x_max+5,x_min-2,y_min-2)];
(  404)         }
(  405)       }
(  406)     }
(  407) 
(  408)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  409) #pragma omp for private(j,k)
(  410)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  411) #pragma ivdep
(  412)         for (j=1;j<=depth;j++) {
(  413)           xvel0[FTNREF2D(x_max+1+j,k,x_max+5,x_min-2,y_min-2)]=-xvel0[FTNREF2D(x_max+1-j,k,x_max+5,x_min-2,y_min-2)];
(  414) 	}
(  415)       }
(  416)     }
(  417)   }
(  418) 
(  419)   if(fields[FTNREF1D(FIELD_XVEL1,1)]==1) {
(  420)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  421) #pragma omp for private(j,k)
(  422)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  423) #pragma ivdep
(  424)         for (k=1;k<=depth;k++) {
(  425)           xvel1[FTNREF2D(j  ,1-k,x_max+5,x_min-2,y_min-2)]=xvel1[FTNREF2D(j  ,1+k,x_max+5,x_min-2,y_min-2)];
(  426) 	}
(  427)       }
(  428)     }
(  429) 
(  430)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  431) #pragma omp for private(j,k)
(  432)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  433) #pragma ivdep
(  434)         for (k=1;k<=depth;k++) {
(  435)           xvel1[FTNREF2D(j  ,y_max+1+k,x_max+5,x_min-2,y_min-2)]=xvel1[FTNREF2D(j  ,y_max+1-k,x_max+5,x_min-2,y_min-2)];
(  436) 	}
(  437)       }
(  438)     }
(  439) 
(  440)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  441) #pragma omp for private(j,k)
(  442)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  443) #pragma ivdep
(  444)         for (j=1;j<=depth;j++) {
(  445)           xvel1[FTNREF2D(1-j,k,x_max+5,x_min-2,y_min-2)]=-xvel1[FTNREF2D(1+j,k,x_max+5,x_min-2,y_min-2)];
(  446)         }
(  447)       }
(  448)     }
(  449) 
(  450)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {



PGC Version 13.5          07/18/2014  14:45:39      page 9


(  451) #pragma omp for private(j,k)
(  452)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  453) #pragma ivdep
(  454)         for (j=1;j<=depth;j++) {
(  455)           xvel1[FTNREF2D(x_max+1+j,k,x_max+5,x_min-2,y_min-2)]=-xvel1[FTNREF2D(x_max+1-j,k,x_max+5,x_min-2,y_min-2)];
(  456) 	}
(  457)       }
(  458)     }
(  459)   }
(  460) 
(  461)   if(fields[FTNREF1D(FIELD_YVEL0,1)]==1) {
(  462)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  463) #pragma omp for private(j,k)
(  464)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  465) #pragma ivdep
(  466)         for (k=1;k<=depth;k++) {
(  467)           yvel0[FTNREF2D(j  ,1-k,x_max+5,x_min-2,y_min-2)]=-yvel0[FTNREF2D(j  ,1+k,x_max+5,x_min-2,y_min-2)];
(  468) 	}
(  469)       }
(  470)     }
(  471) 
(  472)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  473) #pragma omp for private(j,k)
(  474)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  475) #pragma ivdep
(  476)         for (k=1;k<=depth;k++) {
(  477)           yvel0[FTNREF2D(j  ,y_max+1+k,x_max+5,x_min-2,y_min-2)]=-yvel0[FTNREF2D(j  ,y_max+1-k,x_max+5,x_min-2,y_min-2)];
(  478) 	}
(  479)       }
(  480)     }
(  481) 
(  482)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  483) #pragma omp for private(j,k)
(  484)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  485) #pragma ivdep
(  486)         for (j=1;j<=depth;j++) {
(  487)           yvel0[FTNREF2D(1-j,k,x_max+5,x_min-2,y_min-2)]=yvel0[FTNREF2D(1+j,k,x_max+5,x_min-2,y_min-2)];
(  488)         }
(  489)       }
(  490)     }
(  491) 
(  492)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  493) #pragma omp for private(j,k)
(  494)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  495) #pragma ivdep
(  496)         for (j=1;j<=depth;j++) {
(  497)           yvel0[FTNREF2D(x_max+1+j,k,x_max+5,x_min-2,y_min-2)]=yvel0[FTNREF2D(x_max+1-j,k,x_max+5,x_min-2,y_min-2)];
(  498) 	}
(  499)       }
(  500)     }
(  501)   }
(  502) 
(  503)   if(fields[FTNREF1D(FIELD_YVEL1,1)]==1) {
(  504)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  505) #pragma omp for private(j,k)
(  506)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  507) #pragma ivdep
(  508)         for (k=1;k<=depth;k++) {
(  509)           yvel1[FTNREF2D(j  ,1-k,x_max+5,x_min-2,y_min-2)]=-yvel1[FTNREF2D(j  ,1+k,x_max+5,x_min-2,y_min-2)];
(  510) 	}



PGC Version 13.5          07/18/2014  14:45:39      page 10


(  511)       }
(  512)     }
(  513) 
(  514)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  515) #pragma omp for private(j,k)
(  516)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  517) #pragma ivdep
(  518)         for (k=1;k<=depth;k++) {
(  519)           yvel1[FTNREF2D(j  ,y_max+1+k,x_max+5,x_min-2,y_min-2)]=-yvel1[FTNREF2D(j  ,y_max+1-k,x_max+5,x_min-2,y_min-2)];
(  520) 	}
(  521)       }
(  522)     }
(  523) 
(  524)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  525) #pragma omp for private(j,k)
(  526)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  527) #pragma ivdep
(  528)         for (j=1;j<=depth;j++) {
(  529)           yvel1[FTNREF2D(1-j,k,x_max+5,x_min-2,y_min-2)]=yvel1[FTNREF2D(1+j,k,x_max+5,x_min-2,y_min-2)];
(  530)         }
(  531)       }
(  532)     }
(  533) 
(  534)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  535) #pragma omp for private(j,k)
(  536)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  537) #pragma ivdep
(  538)         for (j=1;j<=depth;j++) {
(  539)           yvel1[FTNREF2D(x_max+1+j,k,x_max+5,x_min-2,y_min-2)]=yvel1[FTNREF2D(x_max+1-j,k,x_max+5,x_min-2,y_min-2)];
(  540) 	}
(  541)       }
(  542)     }
(  543)   }
(  544) 
(  545)   if(fields[FTNREF1D(FIELD_VOL_FLUX_X,1)]==1) {
(  546)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  547) #pragma omp for private(j,k)
(  548)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  549) #pragma ivdep
(  550)         for (k=1;k<=depth;k++) {
(  551)           vol_flux_x[FTNREF2D(j  ,1-k,x_max+5,x_min-2,y_min-2)]=vol_flux_x[FTNREF2D(j  ,1+k,x_max+5,x_min-2,y_min-2)];
(  552) 	}
(  553)       }
(  554)     }
(  555) 
(  556)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  557) #pragma omp for private(j,k)
(  558)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  559) #pragma ivdep
(  560)         for (k=1;k<=depth;k++) {
(  561)           vol_flux_x[FTNREF2D(j  ,y_max+k,x_max+5,x_min-2,y_min-2)]=vol_flux_x[FTNREF2D(j  ,y_max-k,x_max+5,x_min-2,y_min-2)
(  562) 	}
(  563)       }
(  564)     }
(  565) 
(  566)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  567) #pragma omp for private(j,k)
(  568)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  569) #pragma ivdep
(  570)         for (j=1;j<=depth;j++) {



PGC Version 13.5          07/18/2014  14:45:39      page 11


(  571)           vol_flux_x[FTNREF2D(1-j,k,x_max+5,x_min-2,y_min-2)]=-vol_flux_x[FTNREF2D(1+j,k,x_max+5,x_min-2,y_min-2)];
(  572)         }
(  573)       }
(  574)     }
(  575)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  576) #pragma omp for private(j,k)
(  577)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  578) #pragma ivdep
(  579)         for (j=1;j<=depth;j++) {
(  580)           vol_flux_x[FTNREF2D(x_max+1+j,k,x_max+5,x_min-2,y_min-2)]=-vol_flux_x[FTNREF2D(x_max+1-j,k,x_max+5,x_min-2,y_min-2
(  581) 	}
(  582)       }
(  583)     }
(  584)   }
(  585) 
(  586)   if(fields[FTNREF1D(FIELD_MASS_FLUX_X,1)]==1) {
(  587)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  588) #pragma omp for private(j,k)
(  589)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  590) #pragma ivdep
(  591)         for (k=1;k<=depth;k++) {
(  592)           mass_flux_x[FTNREF2D(j  ,1-k,x_max+5,x_min-2,y_min-2)]=mass_flux_x[FTNREF2D(j  ,1+k,x_max+5,x_min-2,y_min-2)];
(  593) 	}
(  594)       }
(  595)     }
(  596) 
(  597)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  598) #pragma omp for private(j,k)
(  599)       for (j=x_min-depth;j<=x_max+1+depth;j++) {
(  600) #pragma ivdep
(  601)         for (k=1;k<=depth;k++) {
(  602)           mass_flux_x[FTNREF2D(j  ,y_max+k,x_max+5,x_min-2,y_min-2)]=mass_flux_x[FTNREF2D(j  ,y_max-k,x_max+5,x_min-2,y_min-
(  603) 	}
(  604)       }
(  605)     }
(  606) 
(  607)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  608) #pragma omp for private(j,k)
(  609)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  610) #pragma ivdep
(  611)         for (j=1;j<=depth;j++) {
(  612)           mass_flux_x[FTNREF2D(1-j,k,x_max+5,x_min-2,y_min-2)]=-mass_flux_x[FTNREF2D(1+j,k,x_max+5,x_min-2,y_min-2)];
(  613)         }
(  614)       }
(  615)     }
(  616) 
(  617)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  618) #pragma omp for private(j,k)
(  619)       for (k=y_min-depth;k<=y_max+depth;k++) {
(  620) #pragma ivdep
(  621)         for (j=1;j<=depth;j++) {
(  622)           mass_flux_x[FTNREF2D(x_max+1+j,k,x_max+5,x_min-2,y_min-2)]=-mass_flux_x[FTNREF2D(x_max+1-j,k,x_max+5,x_min-2,y_min
(  623) 	}
(  624)       }
(  625)     }
(  626)   }
(  627) 
(  628)   if(fields[FTNREF1D(FIELD_VOL_FLUX_Y,1)]==1) {
(  629)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  630) #pragma omp for private(j,k)



PGC Version 13.5          07/18/2014  14:45:39      page 12


(  631)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  632) #pragma ivdep
(  633)         for (k=1;k<=depth;k++) {
(  634)           vol_flux_y[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=-vol_flux_y[FTNREF2D(j  ,1+k,x_max+4,x_min-2,y_min-2)];
(  635) 	}
(  636)       }
(  637)     }
(  638) 
(  639)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  640) #pragma omp for private(j,k)
(  641)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  642) #pragma ivdep
(  643)         for (k=1;k<=depth;k++) {
(  644)           vol_flux_y[FTNREF2D(j  ,y_max+k+1,x_max+4,x_min-2,y_min-2)]=-vol_flux_y[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y_m
(  645) 	}
(  646)       }
(  647)     }
(  648) 
(  649)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  650) #pragma omp for private(j,k)
(  651)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  652) #pragma ivdep
(  653)         for (j=1;j<=depth;j++) {
(  654)           vol_flux_y[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=vol_flux_y[FTNREF2D(1+j,k,x_max+4,x_min-2,y_min-2)];
(  655)         }
(  656)       }
(  657)     }
(  658) 
(  659)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  660) #pragma omp for private(j,k)
(  661)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  662) #pragma ivdep
(  663)         for (j=1;j<=depth;j++) {
(  664)           vol_flux_y[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=vol_flux_y[FTNREF2D(x_max-j,k,x_max+4,x_min-2,y_min-2)];
(  665) 	}
(  666)       }
(  667)     }
(  668)   }
(  669) 
(  670)   if(fields[FTNREF1D(FIELD_MASS_FLUX_Y,1)]==1) {
(  671)     if(chunk_neighbours[FTNREF1D(CHUNK_BOTTOM,1)]==EXTERNAL_FACE) {
(  672) #pragma omp for private(j,k)
(  673)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  674) #pragma ivdep
(  675)         for (k=1;k<=depth;k++) {
(  676)           mass_flux_y[FTNREF2D(j  ,1-k,x_max+4,x_min-2,y_min-2)]=-mass_flux_y[FTNREF2D(j  ,1+k,x_max+4,x_min-2,y_min-2)];
(  677) 	}
(  678)       }
(  679)     }
(  680) 
(  681)     if(chunk_neighbours[FTNREF1D(CHUNK_TOP,1)]==EXTERNAL_FACE) {
(  682) #pragma omp for private(j,k)
(  683)       for (j=x_min-depth;j<=x_max+depth;j++) {
(  684) #pragma ivdep
(  685)         for (k=1;k<=depth;k++) {
(  686)           mass_flux_y[FTNREF2D(j  ,y_max+k+1,x_max+4,x_min-2,y_min-2)]=-mass_flux_y[FTNREF2D(j  ,y_max+1-k,x_max+4,x_min-2,y
(  687) 	}
(  688)       }
(  689)     }
(  690) 



PGC Version 13.5          07/18/2014  14:45:39      page 13


(  691)     if(chunk_neighbours[FTNREF1D(CHUNK_LEFT,1)]==EXTERNAL_FACE) {
(  692) #pragma omp for private(j,k)
(  693)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  694) #pragma ivdep
(  695)         for (j=1;j<=depth;j++) {
(  696)           mass_flux_y[FTNREF2D(1-j,k,x_max+4,x_min-2,y_min-2)]=mass_flux_y[FTNREF2D(1+j,k,x_max+4,x_min-2,y_min-2)];
(  697)         }
(  698)       }
(  699)     }
(  700) 
(  701)     if(chunk_neighbours[FTNREF1D(CHUNK_RIGHT,1)]==EXTERNAL_FACE) {
(  702) #pragma omp for private(j,k)
(  703)       for (k=y_min-depth;k<=y_max+1+depth;k++) {
(  704) #pragma ivdep
(  705)         for (j=1;j<=depth;j++) {
(  706)           mass_flux_y[FTNREF2D(x_max+j,k,x_max+4,x_min-2,y_min-2)]=mass_flux_y[FTNREF2D(x_max-j,k,x_max+4,x_min-2,y_min-2)];
(  707) 	}
(  708)       }
(  709)     }
(  710)   }
(  711) 
(  712)  }
(  713) 
(  714) }







































