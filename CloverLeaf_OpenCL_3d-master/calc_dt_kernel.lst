


PGF90 (Version     13.5)          07/18/2014  14:45:27      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: calc_dt_kernel.f90

(    1) !Crown Copyright 2012 AWE.
(    2) !
(    3) ! This file is part of CloverLeaf.
(    4) !
(    5) ! CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) ! the terms of the GNU General Public License as published by the 
(    7) ! Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) ! any later version.
(    9) !
(   10) ! CloverLeaf is distributed in the hope that it will be useful, but 
(   11) ! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) ! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) ! details.
(   14) !
(   15) ! You should have received a copy of the GNU General Public License along with 
(   16) ! CloverLeaf. If not, see http://www.gnu.org/licenses/.
(   17) 
(   18) !>  @brief Fortran timestep kernel
(   19) !>  @author Wayne Gaudin
(   20) !>  @details Calculates the minimum timestep on the mesh chunk based on the CFL
(   21) !>  condition, the velocity gradient and the velocity divergence. A safety
(   22) !>  factor is used to ensure numerical stability.
(   23) 
(   24) MODULE calc_dt_kernel_module
(   25) 
(   26) CONTAINS
(   27) 
(   28) SUBROUTINE calc_dt_kernel(x_min,x_max,y_min,y_max,z_min,z_max, &
(   29)                           g_small,g_big,dtmin,                 &
(   30)                           dtc_safe,                            &
(   31)                           dtu_safe,                            &
(   32)                           dtv_safe,                            &
(   33)                           dtw_safe,                            &
(   34)                           dtdiv_safe,                          &
(   35)                           xarea,                               &
(   36)                           yarea,                               &
(   37)                           zarea,                               &
(   38)                           cellx,                               &
(   39)                           celly,                               &
(   40)                           cellz,                               &
(   41)                           celldx,                              &
(   42)                           celldy,                              &
(   43)                           celldz,                              &
(   44)                           volume,                              &
(   45)                           density0,                            &
(   46)                           energy0,                             &
(   47)                           pressure,                            &
(   48)                           viscosity_a,                         &
(   49)                           soundspeed,                          &
(   50)                           xvel0,yvel0,zvel0,                   &






PGF90 (Version     13.5)          07/18/2014  14:45:27      page 2

(   51)                           dt_min,                              &
(   52)                           dt_min_val,                          &
(   53)                           dtl_control,                         &
(   54)                           xl_pos,                              &
(   55)                           yl_pos,                              &
(   56)                           zl_pos,                              &
(   57)                           jldt,                                &
(   58)                           kldt,                                &
(   59)                           lldt,                                &
(   60)                           small)
(   61) 
(   62)   IMPLICIT NONE
(   63) 
(   64)   INTEGER :: x_min,x_max,y_min,y_max,z_min,z_max
(   65)   REAL(KIND=8)  :: g_small,g_big,dtmin,dt_min_val
(   66)   REAL(KIND=8)  :: dtc_safe,dtu_safe,dtv_safe,dtw_safe,dtdiv_safe
(   67)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+2,z_min-2:z_max+2) :: xarea
(   68)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+3,z_min-2:z_max+2) :: yarea
(   69)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+3) :: zarea
(   70)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2)             :: cellx
(   71)   REAL(KIND=8), DIMENSION(y_min-2:y_max+2)             :: celly
(   72)   REAL(KIND=8), DIMENSION(z_min-2:z_max+2)             :: cellz
(   73)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2)             :: celldx
(   74)   REAL(KIND=8), DIMENSION(y_min-2:y_max+2)             :: celldy
(   75)   REAL(KIND=8), DIMENSION(z_min-2:z_max+2)             :: celldz
(   76)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: volume
(   77)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: density0
(   78)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: energy0
(   79)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: pressure
(   80)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: viscosity_a
(   81)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: soundspeed
(   82)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: xvel0,yvel0,zvel0
(   83)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: dt_min
(   84) 
(   85)   INTEGER          :: dtl_control
(   86)   REAL(KIND=8)     :: xl_pos,yl_pos,zl_pos
(   87)   INTEGER          :: jldt,kldt,lldt
(   88)   INTEGER          :: small
(   89) 
(   90)   INTEGER          :: j,k,l
(   91) 
(   92)   REAL(KIND=8)     :: div,dsx,dsy,dsz,dtut,dtvt,dtwt,dtct,dtdivt,cc,dv1,dv2,jkl_control
(   93) 
(   94)   small=0
(   95)   dt_min_val = g_big
(   96)   jkl_control=1.1
(   97) 
(   98) !$OMP PARALLEL
(   99) 
(  100) !$OMP DO PRIVATE(dsx,dsy,dsz,cc,dv1,dv2,div,dtct,dtut,dtvt,dtwt,dtdivt)
(  101)   DO l=z_min,z_max
(  102)     DO k=y_min,y_max
(  103)       DO j=x_min,x_max
(  104) 
(  105)         dsx=celldx(j)
(  106)         dsy=celldy(k)
(  107)         dsz=celldz(l)
(  108) 






PGF90 (Version     13.5)          07/18/2014  14:45:27      page 3

(  109)         cc=soundspeed(j,k,l)*soundspeed(j,k,l)
(  110)         cc=cc+2.0_8*viscosity_a(j,k,l)/density0(j,k,l)
(  111)         cc=MAX(SQRT(cc),g_small)
(  112) 
(  113)         dtct=dtc_safe*MIN(dsx,dsy,dsz)/cc
(  114) 
(  115)         div=0.0
(  116) 
(  117)         dv1=(xvel0(j  ,k  ,l  )+xvel0(j  ,k+1,l  )+xvel0(j  ,k  ,l+1)+xvel0(j  ,k+1,l+1))*xarea(j  ,k  ,l  )
(  118)         dv2=(xvel0(j+1,k  ,l  )+xvel0(j+1,k+1,l  )+xvel0(j+1,k  ,l+1)+xvel0(j+1,k+1,l+1))*xarea(j+1,k  ,l  )
(  119) 
(  120)         div=div+dv2-dv1
(  121) 
(  122)         dtut=dtu_safe*2.0_8*volume(j,k,l  )/MAX(ABS(dv1),ABS(dv2),g_small*volume(j,k,l))
(  123) 
(  124)         dv1=(yvel0(j  ,k  ,l  )+yvel0(j+1,k  ,l  )+yvel0(j  ,k  ,l+1)+yvel0(j+1,k  ,l+1))*yarea(j  ,k  ,l  )
(  125)         dv2=(yvel0(j  ,k+1,l  )+yvel0(j+1,k+1,l  )+yvel0(j  ,k+1,l+1)+yvel0(j+1,k+1,l+1))*yarea(j  ,k+1,l  )
(  126) 
(  127)         div=div+dv2-dv1
(  128) 
(  129)         dtvt=dtv_safe*2.0_8*volume(j,k,l)/MAX(ABS(dv1),ABS(dv2),g_small*volume(j,k,l))
(  130) 
(  131)         dv1=(zvel0(j  ,k  ,l  )+zvel0(j+1,k  ,l  )+zvel0(j  ,k+1,l  )+zvel0(j+1,k+1,l  ))*zarea(j  ,k  ,l  )
(  132)         dv2=(zvel0(j  ,k  ,l+1)+zvel0(j+1,k  ,l+1)+zvel0(j  ,k+1,l+1)+zvel0(j+1,k+1,l+1))*zarea(j  ,k  ,l+1)
(  133) 
(  134)         div=div+dv2-dv1
(  135) 
(  136)         dtwt=dtw_safe*2.0_8*volume(j,k,l)/MAX(ABS(dv1),ABS(dv2),g_small*volume(j,k,l))
(  137) 
(  138)         div=div/(2.0_8*volume(j,k,l))
(  139) 
(  140)         IF(div.LT.-g_small)THEN
(  141)           dtdivt=dtdiv_safe*(-1.0_8/div)
(  142)         ELSE
(  143)           dtdivt=g_big
(  144)         ENDIF
(  145) 
(  146)         dt_min(j,k,l)=MIN(dtct,dtut,dtvt,dtwt,dtdivt)
(  147) 
(  148)       ENDDO
(  149)     ENDDO
(  150)   ENDDO
(  151) !$OMP END DO
(  152) 
(  153) !$OMP DO REDUCTION(MIN : dt_min_val)
(  154)   DO l=z_min,z_max
(  155)     DO k=y_min,y_max
(  156)       DO j=x_min,x_max
(  157)         IF(dt_min(j,k,l).LT.dt_min_val) dt_min_val=dt_min(j,k,l)
(  158)       ENDDO
(  159)     ENDDO
(  160)   ENDDO
(  161) !$OMP END DO
(  162) 
(  163) !$OMP END PARALLEL
(  164) 
(  165)   ! Extract the mimimum timestep information
(  166)   dtl_control=10.01*(jkl_control-INT(jkl_control))






PGF90 (Version     13.5)          07/18/2014  14:45:27      page 4

(  167)   jkl_control=jkl_control-(jkl_control-INT(jkl_control))
(  168)   jldt=MOD(INT(jkl_control),x_max)
(  169)   kldt=1+(jkl_control/x_max)
(  170)   lldt=1+(jkl_control/x_max)
(  171)   xl_pos=cellx(jldt)
(  172)   yl_pos=celly(kldt)
(  173)   zl_pos=cellz(lldt)
(  174) 
(  175)   IF(dt_min_val.LT.dtmin) small=1
(  176) 
(  177)   IF(small.NE.0)THEN
(  178)     WRITE(0,*) 'Timestep information:'
(  179)     WRITE(0,*) 'j, k                 : ',jldt,kldt
(  180)     WRITE(0,*) 'x, y                 : ',cellx(jldt),celly(kldt)
(  181)     WRITE(0,*) 'timestep : ',dt_min_val
(  182)     WRITE(0,*) 'Cell velocities;'
(  183)     WRITE(0,*) xvel0(jldt  ,kldt  ,lldt  ),yvel0(jldt  ,kldt  ,lldt  ),zvel0(jldt  ,kldt  ,lldt  )
(  184)     WRITE(0,*) xvel0(jldt+1,kldt  ,lldt  ),yvel0(jldt+1,kldt  ,lldt  ),zvel0(jldt  ,kldt  ,lldt  )
(  185)     WRITE(0,*) xvel0(jldt+1,kldt+1,lldt  ),yvel0(jldt+1,kldt+1,lldt  ),zvel0(jldt  ,kldt  ,lldt  )
(  186)     WRITE(0,*) xvel0(jldt  ,kldt+1,lldt  ),yvel0(jldt  ,kldt+1,lldt  ),zvel0(jldt  ,kldt  ,lldt  )
(  187)     WRITE(0,*) xvel0(jldt  ,kldt  ,lldt+1),yvel0(jldt  ,kldt  ,lldt+1),zvel0(jldt  ,kldt  ,lldt+1)
(  188)     WRITE(0,*) xvel0(jldt+1,kldt  ,lldt+1),yvel0(jldt+1,kldt  ,lldt+1),zvel0(jldt  ,kldt  ,lldt+1)
(  189)     WRITE(0,*) xvel0(jldt+1,kldt+1,lldt+1),yvel0(jldt+1,kldt+1,lldt+1),zvel0(jldt  ,kldt  ,lldt+1)
(  190)     WRITE(0,*) xvel0(jldt  ,kldt+1,lldt+1),yvel0(jldt  ,kldt+1,lldt+1),zvel0(jldt  ,kldt  ,lldt+1)
(  191)     WRITE(0,*) 'density, energy, pressure, soundspeed '
(  192)     WRITE(0,*) density0(jldt,kldt,lldt),energy0(jldt,kldt,lldt),pressure(jldt,kldt,lldt),soundspeed(jldt,kldt,lldt)
(  193)   ENDIF
(  194) 
(  195) END SUBROUTINE calc_dt_kernel
(  196) 
(  197) END MODULE calc_dt_kernel_module
(  198) 
