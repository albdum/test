


PGF90 (Version     13.5)          07/18/2014  14:45:32      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: advec_cell_kernel.f90

(    1) !Crown Copyright 2012 AWE.
(    2) !
(    3) ! This file is part of CloverLeaf.
(    4) !
(    5) ! CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) ! the terms of the GNU General Public License as published by the 
(    7) ! Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) ! any later version.
(    9) !
(   10) ! CloverLeaf is distributed in the hope that it will be useful, but 
(   11) ! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) ! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) ! details.
(   14) !
(   15) ! You should have received a copy of the GNU General Public License along with 
(   16) ! CloverLeaf. If not, see http://www.gnu.org/licenses/.
(   17) 
(   18) !>  @brief Fortran cell advection kernel.
(   19) !>  @author Wayne Gaudin
(   20) !>  @details Performs a second order advective remap using van-Leer limiting
(   21) !>  with directional splitting.
(   22) 
(   23) ! Notes
(   24) ! All the sweep numbers need to be update and intermediate volumes correctly calculated
(   25) 
(   26) MODULE advec_cell_kernel_module
(   27) 
(   28) CONTAINS
(   29) 
(   30) SUBROUTINE advec_cell_kernel(x_min,       &
(   31)                              x_max,       &
(   32)                              y_min,       &
(   33)                              y_max,       &
(   34)                              z_min,       &
(   35)                              z_max,       &
(   36)                              advect_x,    &
(   37)                              dir,         &
(   38)                              sweep_number,&
(   39)                              vertexdx,    &
(   40)                              vertexdy,    &
(   41)                              vertexdz,    &
(   42)                              volume,      &
(   43)                              density1,    &
(   44)                              energy1,     &
(   45)                              mass_flux_x, &
(   46)                              vol_flux_x,  &
(   47)                              mass_flux_y, &
(   48)                              vol_flux_y,  &
(   49)                              mass_flux_z, &
(   50)                              vol_flux_z,  &






PGF90 (Version     13.5)          07/18/2014  14:45:32      page 2

(   51)                              pre_vol,     &
(   52)                              post_vol,    &
(   53)                              pre_mass,    &
(   54)                              post_mass,   &
(   55)                              advec_vol,   &
(   56)                              post_ener,   &
(   57)                              ener_flux    )
(   58) 
(   59)   IMPLICIT NONE
(   60) 
(   61)   INTEGER :: x_min,x_max,y_min,y_max,z_min,z_max
(   62)   INTEGER :: sweep_number,dir
(   63)   LOGICAL :: advect_x
(   64)   INTEGER :: g_xdir=1,g_ydir=2,g_zdir=3
(   65) 
(   66)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: volume
(   67)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: density1
(   68)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+2) :: energy1
(   69)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+2,z_min-2:z_max+2) :: vol_flux_x
(   70)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+3,z_min-2:z_max+2) :: vol_flux_y
(   71)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+3) :: vol_flux_z
(   72)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+2,z_min-2:z_max+2) :: mass_flux_x
(   73)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+3,z_min-2:z_max+2) :: mass_flux_y
(   74)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+3) :: mass_flux_z
(   75)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: pre_vol
(   76)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: post_vol
(   77)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: pre_mass
(   78)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: post_mass
(   79)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: advec_vol
(   80)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+2) :: post_ener
(   81)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+2) :: ener_flux
(   82) 
(   83)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3) :: vertexdx
(   84)   REAL(KIND=8), DIMENSION(y_min-2:y_max+3) :: vertexdy
(   85)   REAL(KIND=8), DIMENSION(z_min-2:z_max+3) :: vertexdz
(   86) 
(   87)   INTEGER :: j,k,l,upwind,donor,downwind,dif
(   88) 
(   89)   REAL(KIND=8) :: wind,sigma,sigmat,sigmav,sigmam,sigma3,sigma4
(   90)   REAL(KIND=8) :: diffuw,diffdw,limiter
(   91)   REAL(KIND=8) :: one_by_six=1.0_8/6.0_8
(   92) 
(   93) !$OMP PARALLEL
(   94) 
(   95)   IF(dir.EQ.g_xdir) THEN
(   96) 
(   97)     IF(sweep_number.EQ.1)THEN
(   98) !$OMP DO
(   99)       DO l=z_min-2,z_max+2
(  100)         DO k=y_min-2,y_max+2
(  101)           DO j=x_min-2,x_max+2
(  102)             pre_vol(j,k,l)=volume(j,k,l)  +(vol_flux_x(j+1,k  ,l  )-vol_flux_x(j,k,l) &
(  103)                                            +vol_flux_y(j  ,k+1,l  )-vol_flux_y(j,k,l) &
(  104)                                            +vol_flux_z(j  ,k  ,l+1)-vol_flux_z(j,k,l))
(  105)             post_vol(j,k,l)=pre_vol(j,k,l)-(vol_flux_x(j+1,k  ,l  )-vol_flux_x(j,k,l))
(  106)           ENDDO
(  107)         ENDDO
(  108)       ENDDO 






PGF90 (Version     13.5)          07/18/2014  14:45:32      page 3

(  109) !$OMP END DO
(  110)     ELSEIF(sweep_number.EQ.3) THEN
(  111) !$OMP DO
(  112)       DO l=z_min-2,z_max+2
(  113)         DO k=y_min-2,y_max+2
(  114)           DO j=x_min-2,x_max+2
(  115)             pre_vol(j,k,l) =volume(j,k,l)+vol_flux_x(j+1,k  ,l  )-vol_flux_x(j,k,l)
(  116)             post_vol(j,k,l)=volume(j,k,l)
(  117)           ENDDO
(  118)         ENDDO
(  119)       ENDDO 
(  120) !$OMP END DO
(  121)     ENDIF
(  122) 
(  123) !$OMP DO PRIVATE(upwind,donor,downwind,dif,sigmat,sigma3,sigma4,sigmav,sigma,sigmam, &
(  124) !$OMP            diffuw,diffdw,limiter)
(  125)     DO l=z_min,z_max
(  126)       DO k=y_min,y_max
(  127)         DO j=x_min,x_max+2
(  128) 
(  129)           IF(vol_flux_x(j,k,l).GT.0.0)THEN
(  130)             upwind   =j-2
(  131)             donor    =j-1
(  132)             downwind =j
(  133)             dif      =donor
(  134)           ELSE
(  135)             upwind   =MIN(j+1,x_max+2)
(  136)             donor    =j
(  137)             downwind =j-1
(  138)             dif      =upwind
(  139)           ENDIF
(  140) 
(  141)           sigmat=ABS(vol_flux_x(j,k,l))/pre_vol(donor,k,l)
(  142)           sigma3=(1.0_8+sigmat)*(vertexdx(j)/vertexdx(dif))
(  143)           sigma4=2.0_8-sigmat
(  144) 
(  145)           sigma=sigmat
(  146)           sigmav=sigmat
(  147) 
(  148)           diffuw=density1(donor,k,l)-density1(upwind,k,l)
(  149)           diffdw=density1(downwind,k,l)-density1(donor,k,l)
(  150)           IF(diffuw*diffdw.GT.0.0)THEN
(  151)             limiter=(1.0_8-sigmav)*SIGN(1.0_8,diffdw)*MIN(ABS(diffuw),ABS(diffdw)&
(  152)                 ,one_by_six*(sigma3*ABS(diffuw)+sigma4*ABS(diffdw)))
(  153)           ELSE
(  154)             limiter=0.0
(  155)           ENDIF
(  156)           mass_flux_x(j,k,l)=vol_flux_x(j,k,l)*(density1(donor,k,l)+limiter)
(  157) 
(  158)           sigmam=ABS(mass_flux_x(j,k,l))/(density1(donor,k,l)*pre_vol(donor,k,l))
(  159)           diffuw=energy1(donor,k,l)-energy1(upwind,k,l)
(  160)           diffdw=energy1(downwind,k,l)-energy1(donor,k,l)
(  161)           IF(diffuw*diffdw.GT.0.0)THEN
(  162)             limiter=(1.0_8-sigmam)*SIGN(1.0_8,diffdw)*MIN(ABS(diffuw),ABS(diffdw)&
(  163)                 ,one_by_six*(sigma3*ABS(diffuw)+sigma4*ABS(diffdw)))
(  164)           ELSE
(  165)             limiter=0.0
(  166)           ENDIF






PGF90 (Version     13.5)          07/18/2014  14:45:32      page 4

(  167)           ener_flux(j,k,l)=mass_flux_x(j,k,l)*(energy1(donor,k,l)+limiter)
(  168) 
(  169)         ENDDO
(  170)       ENDDO
(  171)     ENDDO
(  172) !$OMP END DO
(  173) 
(  174) !$OMP DO
(  175)     DO l=z_min,z_max
(  176)       DO k=y_min,y_max
(  177)         DO j=x_min,x_max
(  178)           pre_mass(j,k,l)=density1(j,k,l)*pre_vol(j,k,l)
(  179)           post_mass(j,k,l)=pre_mass(j,k,l)+mass_flux_x(j,k,l)-mass_flux_x(j+1,k,l)
(  180)           post_ener(j,k,l)=(energy1(j,k,l)*pre_mass(j,k,l)+ener_flux(j,k,l)-ener_flux(j+1,k,l))/post_mass(j,k,l)
(  181)           advec_vol(j,k,l)=pre_vol(j,k,l)+vol_flux_x(j,k,l)-vol_flux_x(j+1,k,l)
(  182)           density1(j,k,l)=post_mass(j,k,l)/advec_vol(j,k,l)
(  183)           energy1(j,k,l)=post_ener(j,k,l)
(  184)         ENDDO
(  185)       ENDDO
(  186)     ENDDO
(  187) !$OMP END DO
(  188) 
(  189)   ELSEIF(dir.EQ.g_ydir) THEN
(  190)     IF(sweep_number.EQ.2) THEN
(  191)       IF(advect_x) THEN
(  192) !$OMP DO
(  193)         DO l=z_min-2,z_max+2
(  194)           DO k=y_min-2,y_max+2
(  195)             DO j=x_min-2,x_max+2
(  196)               pre_vol(j,k,l) =volume(j,k,l)  +vol_flux_y(j  ,k+1,l  )-vol_flux_y(j,k,l) &
(  197)                                              +vol_flux_x(j+1,k  ,l  )-vol_flux_x(j,k,l)
(  198)               post_vol(j,k,l)=pre_vol(j,k,l)-(vol_flux_y(j  ,k+1,l  )-vol_flux_y(j,k,l))
(  199)             ENDDO
(  200)           ENDDO
(  201)         ENDDO
(  202) !$OMP END DO
(  203)       ELSE
(  204) !$OMP DO
(  205)         DO l=z_min-2,z_max+2
(  206)           DO k=y_min-2,y_max+2
(  207)             DO j=x_min-2,x_max+2
(  208)               pre_vol(j,k,l) =volume(j,k,l)  +vol_flux_y(j  ,k+1,l  )-vol_flux_y(j,k,l) &
(  209)                                              +vol_flux_z(j  ,k  ,l+1)-vol_flux_z(j,k,l)
(  210)               post_vol(j,k,l)=pre_vol(j,k,l)-(vol_flux_y(j  ,k+1,l  )-vol_flux_y(j,k,l))
(  211)             ENDDO
(  212)           ENDDO
(  213)         ENDDO
(  214) !$OMP END DO
(  215)       ENDIF
(  216)     ENDIF
(  217) 
(  218) !$OMP DO PRIVATE(upwind,donor,downwind,dif,sigmat,sigma3,sigma4,sigmav,sigma,sigmam, &
(  219) !$OMP            diffuw,diffdw,limiter)
(  220)     DO l=z_min,z_max+2
(  221)       DO k=y_min,y_max+2
(  222)         DO j=x_min,x_max
(  223) 
(  224)           IF(vol_flux_y(j,k,l).GT.0.0)THEN






PGF90 (Version     13.5)          07/18/2014  14:45:32      page 5

(  225)             upwind   =k-2
(  226)             donor    =k-1
(  227)             downwind =k
(  228)             dif      =donor
(  229)           ELSE
(  230)             upwind   =MIN(k+1,y_max+2)
(  231)             donor    =k
(  232)             downwind =k-1
(  233)             dif      =upwind
(  234)           ENDIF
(  235) 
(  236)           sigmat=ABS(vol_flux_y(j,k,l))/pre_vol(j,donor,l)
(  237)           sigma3=(1.0_8+sigmat)*(vertexdy(k)/vertexdy(dif))
(  238)           sigma4=2.0_8-sigmat
(  239) 
(  240)           sigma=sigmat
(  241)           sigmav=sigmat
(  242) 
(  243)           diffuw=density1(j,donor,l)-density1(j,upwind,l)
(  244)           diffdw=density1(j,downwind,l)-density1(j,donor,l)
(  245)           IF(diffuw*diffdw.GT.0.0)THEN
(  246)             limiter=(1.0_8-sigmav)*SIGN(1.0_8,diffdw)*MIN(ABS(diffuw),ABS(diffdw)&
(  247)                 ,one_by_six*(sigma3*ABS(diffuw)+sigma4*ABS(diffdw)))
(  248)           ELSE
(  249)             limiter=0.0
(  250)           ENDIF
(  251)           mass_flux_y(j,k,l)=vol_flux_y(j,k,l)*(density1(j,donor,l)+limiter)
(  252) 
(  253)           sigmam=ABS(mass_flux_y(j,k,l))/(density1(j,donor,l)*pre_vol(j,donor,l))
(  254)           diffuw=energy1(j,donor,l)-energy1(j,upwind,l)
(  255)           diffdw=energy1(j,downwind,l)-energy1(j,donor,l)
(  256)           IF(diffuw*diffdw.GT.0.0)THEN
(  257)             limiter=(1.0_8-sigmam)*SIGN(1.0_8,diffdw)*MIN(ABS(diffuw),ABS(diffdw)&
(  258)                 ,one_by_six*(sigma3*ABS(diffuw)+sigma4*ABS(diffdw)))
(  259)           ELSE
(  260)             limiter=0.0
(  261)           ENDIF
(  262)           ener_flux(j,k,l)=mass_flux_y(j,k,l)*(energy1(j,donor,l)+limiter)
(  263) 
(  264)         ENDDO
(  265)       ENDDO
(  266)     ENDDO
(  267) !$OMP END DO
(  268) 
(  269) !$OMP DO
(  270)     DO l=z_min,z_max
(  271)       DO k=y_min,y_max
(  272)         DO j=x_min,x_max
(  273)           pre_mass(j,k,l)=density1(j,k,l)*pre_vol(j,k,l)
(  274)           post_mass(j,k,l)=pre_mass(j,k,l)+mass_flux_y(j,k,l)-mass_flux_y(j,k+1,l)
(  275)           post_ener(j,k,l)=(energy1(j,k,l)*pre_mass(j,k,l)+ener_flux(j,k,l)-ener_flux(j,k+1,l))/post_mass(j,k,l)
(  276)           advec_vol(j,k,l)=pre_vol(j,k,l)+vol_flux_y(j,k,l)-vol_flux_y(j,k+1,l)
(  277)           density1(j,k,l)=post_mass(j,k,l)/advec_vol(j,k,l)
(  278)           energy1(j,k,l)=post_ener(j,k,l)
(  279)         ENDDO
(  280)       ENDDO
(  281)     ENDDO
(  282) !$OMP END DO






PGF90 (Version     13.5)          07/18/2014  14:45:32      page 6

(  283) 
(  284) 
(  285)   ELSEIF(dir.EQ.g_zdir) THEN
(  286) 
(  287)     IF(sweep_number.EQ.1)THEN
(  288) !$OMP DO
(  289)       DO l=z_min-2,z_max+2
(  290)         DO k=y_min-2,y_max+2
(  291)           DO j=x_min-2,x_max+2
(  292)             pre_vol(j,k,l)=  volume(j,k,l)+(vol_flux_x(j+1,k  ,l  )-vol_flux_x(j,k,l) &
(  293)                                            +vol_flux_y(j  ,k+1,l  )-vol_flux_y(j,k,l) &
(  294)                                            +vol_flux_z(j  ,k  ,l+1)-vol_flux_z(j,k,l))
(  295)             post_vol(j,k,l)=pre_vol(j,k,l)-(vol_flux_z(j  ,k  ,l+1)-vol_flux_z(j,k,l))
(  296)           ENDDO
(  297)         ENDDO
(  298)       ENDDO
(  299) !$OMP END DO
(  300)     ELSEIF(sweep_number.EQ.3) THEN
(  301) !$OMP DO
(  302)       DO l=z_min-2,z_max+2
(  303)         DO k=y_min-2,y_max+2
(  304)           DO j=x_min-2,x_max+2
(  305)             pre_vol(j,k,l)= volume(j,k,l)+vol_flux_z(j  ,k,l+1)-vol_flux_z(j,k,l)
(  306)             post_vol(j,k,l)=volume(j,k,l)
(  307)           ENDDO
(  308)         ENDDO
(  309)       ENDDO
(  310) !$OMP END DO
(  311)     ENDIF
(  312) 
(  313) !$OMP DO PRIVATE(upwind,donor,downwind,dif,sigmat,sigma3,sigma4,sigmav,sigma,sigmam, &
(  314) !$OMP            diffuw,diffdw,limiter)
(  315)     DO l=z_min,z_max+2
(  316)       DO k=y_min,y_max
(  317)         DO j=x_min,x_max
(  318) 
(  319)           IF(vol_flux_z(j,k,l).GT.0.0)THEN
(  320)             upwind   =l-2
(  321)             donor    =l-1
(  322)             downwind =l
(  323)             dif      =donor
(  324)           ELSE
(  325)             upwind   =MIN(l+1,z_max+2)
(  326)             donor    =l
(  327)             downwind =l-1
(  328)             dif      =upwind
(  329)           ENDIF
(  330) 
(  331)           sigmat=ABS(vol_flux_z(j,k,l))/pre_vol(j,k,donor)
(  332)           sigma3=(1.0_8+sigmat)*(vertexdz(l)/vertexdz(dif))
(  333)           sigma4=2.0_8-sigmat
(  334) 
(  335)           sigma=sigmat
(  336)           sigmav=sigmat
(  337) 
(  338)           diffuw=density1(j,k,donor)-density1(j,k,upwind)
(  339)           diffdw=density1(j,k,downwind)-density1(j,k,donor)
(  340)           IF(diffuw*diffdw.GT.0.0)THEN






PGF90 (Version     13.5)          07/18/2014  14:45:32      page 7

(  341)             limiter=(1.0_8-sigmav)*SIGN(1.0_8,diffdw)*MIN(ABS(diffuw),ABS(diffdw)&
(  342)                 ,one_by_six*(sigma3*ABS(diffuw)+sigma4*ABS(diffdw)))
(  343)           ELSE
(  344)             limiter=0.0
(  345)           ENDIF
(  346)           mass_flux_z(j,k,l)=vol_flux_z(j,k,l)*(density1(j,k,donor)+limiter)
(  347) 
(  348)           sigmam=ABS(mass_flux_z(j,k,l))/(density1(j,k,donor)*pre_vol(j,k,donor))
(  349)           diffuw=energy1(j,k,donor)-energy1(j,k,upwind)
(  350)           diffdw=energy1(j,k,downwind)-energy1(j,k,donor)
(  351)           IF(diffuw*diffdw.GT.0.0)THEN
(  352)             limiter=(1.0_8-sigmam)*SIGN(1.0_8,diffdw)*MIN(ABS(diffuw),ABS(diffdw)&
(  353)                 ,one_by_six*(sigma3*ABS(diffuw)+sigma4*ABS(diffdw)))
(  354)           ELSE
(  355)             limiter=0.0
(  356)           ENDIF
(  357)           ener_flux(j,k,l)=mass_flux_z(j,k,l)*(energy1(j,k,donor)+limiter)
(  358) 
(  359)         ENDDO
(  360)       ENDDO
(  361)     ENDDO
(  362) !$OMP END DO
(  363) 
(  364) !$OMP DO
(  365)     DO l=z_min,z_max
(  366)       DO k=y_min,y_max
(  367)         DO j=x_min,x_max
(  368)           pre_mass(j,k,l)=density1(j,k,l)*pre_vol(j,k,l)
(  369)           post_mass(j,k,l)=pre_mass(j,k,l)+mass_flux_z(j,k,l)-mass_flux_z(j,k,l+1)
(  370)           post_ener(j,k,l)=(energy1(j,k,l)*pre_mass(j,k,l)+ener_flux(j,k,l)-ener_flux(j,k,l+1))/post_mass(j,k,l)
(  371)           advec_vol(j,k,l)=pre_vol(j,k,l)+vol_flux_z(j,k,l)-vol_flux_z(j,k,l+1)
(  372)           density1(j,k,l)=post_mass(j,k,l)/advec_vol(j,k,l)
(  373)           energy1(j,k,l)=post_ener(j,k,l)
(  374)         ENDDO
(  375)       ENDDO
(  376)     ENDDO
(  377) !$OMP END DO
(  378) 
(  379)   ENDIF
(  380) 
(  381) !$OMP END PARALLEL
(  382) 
(  383) END SUBROUTINE advec_cell_kernel
(  384) 
(  385) END MODULE advec_cell_kernel_module
(  386) 
