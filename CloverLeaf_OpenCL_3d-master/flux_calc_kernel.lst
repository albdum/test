


PGF90 (Version     13.5)          07/18/2014  14:45:31      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: flux_calc_kernel.f90

(    1) !Crown Copyright 2012 AWE.
(    2) !
(    3) ! This file is part of CloverLeaf.
(    4) !
(    5) ! CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) ! the terms of the GNU General Public License as published by the 
(    7) ! Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) ! any later version.
(    9) !
(   10) ! CloverLeaf is distributed in the hope that it will be useful, but 
(   11) ! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) ! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) ! details.
(   14) !
(   15) ! You should have received a copy of the GNU General Public License along with 
(   16) ! CloverLeaf. If not, see http://www.gnu.org/licenses/.
(   17) 
(   18) !>  @brief Fortran flux kernel.
(   19) !>  @author Wayne Gaudin
(   20) !>  @details The edge volume fluxes are calculated based on the velocity fields.
(   21) 
(   22) MODULE flux_calc_kernel_module
(   23) 
(   24) CONTAINS
(   25) 
(   26) SUBROUTINE flux_calc_kernel(x_min,x_max,y_min,y_max,z_min,z_max,dt, &
(   27)                             xarea,                                  &
(   28)                             yarea,                                  &
(   29)                             zarea,                                  &
(   30)                             xvel0,                                  &
(   31)                             yvel0,                                  &
(   32)                             zvel0,                                  &
(   33)                             xvel1,                                  &
(   34)                             yvel1,                                  &
(   35)                             zvel1,                                  &
(   36)                             vol_flux_x,                             &
(   37)                             vol_flux_y,                             &
(   38)                             vol_flux_z                              )
(   39) 
(   40)   IMPLICIT NONE
(   41) 
(   42)   INTEGER       :: x_min, x_max, y_min, y_max, z_min, z_max
(   43)   REAL(KIND=8) :: dt
(   44)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+2,z_min-2:z_max+2) :: xarea
(   45)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+3,z_min-2:z_max+2) :: yarea
(   46)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+3) :: zarea
(   47)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: xvel0,yvel0,zvel0
(   48)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+3,z_min-2:z_max+3) :: xvel1,yvel1,zvel1
(   49)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3,y_min-2:y_max+2,z_min-2:z_max+2) :: vol_flux_x
(   50)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+3,z_min-2:z_max+2) :: vol_flux_y






PGF90 (Version     13.5)          07/18/2014  14:45:31      page 2

(   51)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2,z_min-2:z_max+3) :: vol_flux_z
(   52) 
(   53)   INTEGER :: j,k,l
(   54) 
(   55) !$OMP PARALLEL
(   56) 
(   57) !$OMP DO
(   58)   DO l=z_min,z_max
(   59)     DO k=y_min,y_max
(   60)       DO j=x_min,x_max+1 
(   61)         vol_flux_x(j,k,l)=0.125_8*dt*xarea(j,k,l)                  &
(   62)                          *(xvel0(j,k,l)+xvel0(j,k+1,l)+xvel0(j,k,l+1)+xvel0(j,k+1,l+1) &
(   63)                           +xvel1(j,k,l)+xvel1(j,k+1,l)+xvel1(j,k,l+1)+xvel1(j,k+1,l+1))
(   64)       ENDDO
(   65)     ENDDO
(   66)   ENDDO
(   67) !$OMP END DO
(   68) 
(   69) !$OMP DO
(   70)   DO l=z_min,z_max
(   71)     DO k=y_min,y_max+1
(   72)       DO j=x_min,x_max
(   73)         vol_flux_y(j,k,l)=0.125_8*dt*yarea(j,k,l)                  &
(   74)                          *(yvel0(j,k,l)+yvel0(j+1,k,l)+yvel0(j,k,l+1)+yvel0(j+1,k,l+1) &
(   75)                           +yvel1(j,k,l)+yvel1(j+1,k,l)+yvel1(j,k,l+1)+yvel1(j+1,k,l+1))
(   76)       ENDDO
(   77)     ENDDO
(   78)   ENDDO
(   79) !$OMP END DO
(   80) 
(   81) !$OMP DO
(   82)   DO l=z_min,z_max+1
(   83)     DO k=y_min,y_max
(   84)       DO j=x_min,x_max
(   85)         vol_flux_z(j,k,l)=0.125_8*dt*zarea(j,k,l)                  &
(   86)                          *(zvel0(j,k,l)+zvel0(j+1,k,l)+zvel0(j+1,k,l)+zvel0(j+1,k+1,l) &
(   87)                           +zvel1(j,k,l)+zvel1(j+1,k,l)+zvel1(j,k+1,l)+zvel1(j+1,k+1,l))
(   88)       ENDDO
(   89)     ENDDO
(   90)   ENDDO
(   91) !$OMP END DO
(   92) 
(   93) !$OMP END PARALLEL
(   94) 
(   95) END SUBROUTINE flux_calc_kernel
(   96) 
(   97) END MODULE flux_calc_kernel_module
