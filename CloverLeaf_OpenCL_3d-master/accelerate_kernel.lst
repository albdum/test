


PGF90 (Version     13.5)          07/18/2014  14:45:29      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: accelerate_kernel.f90

(    1) !Crown Copyright 2012 AWE.
(    2) !
(    3) ! This file is part of CloverLeaf.
(    4) !
(    5) ! CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) ! the terms of the GNU General Public License as published by the 
(    7) ! Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) ! any later version.
(    9) !
(   10) ! CloverLeaf is distributed in the hope that it will be useful, but 
(   11) ! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) ! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) ! details.
(   14) !
(   15) ! You should have received a copy of the GNU General Public License along with 
(   16) ! CloverLeaf. If not, see http://www.gnu.org/licenses/.
(   17) 
(   18) !>  @brief Fortran acceleration kernel
(   19) !>  @author Wayne Gaudin
(   20) !>  @details The pressure and viscosity gradients are used to update the 
(   21) !>  velocity field.
(   22) 
(   23) MODULE accelerate_kernel_module
(   24) 
(   25) CONTAINS
(   26) 
(   27) SUBROUTINE accelerate_kernel(x_min,x_max,y_min,y_max,z_min,z_max,dt,     &
(   28)                              xarea,yarea,zarea,                          &
(   29)                              volume,                                     &
(   30)                              density0,                                   &
(   31)                              pressure,                                   &
(   32)                              viscosity,                                  &
(   33)                              xvel0,                                      &
(   34)                              yvel0,                                      &
(   35)                              zvel0,                                      &
(   36)                              xvel1,                                      &
(   37)                              yvel1,                                      &
(   38)                              zvel1,                                      &
(   39)                              stepbymass                                  )
(   40) 
(   41)   IMPLICIT NONE
(   42) 
(   43)   INTEGER               :: x_min,x_max,y_min,y_max,z_min,z_max
(   44)   REAL(KIND=8)          :: dt
(   45) 
(   46)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2 ,z_min-2:z_max+2) :: density0
(   47)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2 ,z_min-2:z_max+2) :: volume
(   48)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3 ,y_min-2:y_max+2 ,z_min-2:z_max+2) :: xarea
(   49)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+3 ,z_min-2:z_max+2) :: yarea
(   50)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2 ,z_min-2:z_max+3) :: zarea






PGF90 (Version     13.5)          07/18/2014  14:45:29      page 2

(   51)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2 ,z_min-2:z_max+2) :: pressure
(   52)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2 ,z_min-2:z_max+2) :: viscosity
(   53)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3 ,y_min-2:y_max+3 ,z_min-2:z_max+3) :: xvel0,yvel0,zvel0
(   54)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3 ,y_min-2:y_max+3 ,z_min-2:z_max+3) :: xvel1,yvel1,zvel1
(   55)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3 ,y_min-2:y_max+3 ,z_min-2:z_max+3) :: stepbymass
(   56) 
(   57)   INTEGER               :: j,k,l
(   58)   REAL(KIND=8)          :: nodal_mass
(   59) 
(   60) !$OMP PARALLEL
(   61) 
(   62) !$OMP DO PRIVATE(nodal_mass)
(   63)   DO l=z_min,z_max+1
(   64)     DO k=y_min,y_max+1
(   65)       DO j=x_min,x_max+1
(   66) 
(   67)         nodal_mass=(density0(j-1,k-1,l  )*volume(j-1,k-1,l  )  &
(   68)                    +density0(j  ,k-1,l  )*volume(j  ,k-1,l  )  &
(   69)                    +density0(j  ,k  ,l  )*volume(j  ,k  ,l  )  &
(   70)                    +density0(j-1,k  ,l  )*volume(j-1,k  ,l  )  &
(   71)                    +density0(j-1,k-1,l-1)*volume(j-1,k-1,l-1)  &
(   72)                    +density0(j  ,k-1,l-1)*volume(j  ,k-1,l-1)  &
(   73)                    +density0(j  ,k  ,l-1)*volume(j  ,k  ,l-1)  &
(   74)                    +density0(j-1,k  ,l-1)*volume(j-1,k  ,l-1)) &
(   75)                    *0.125_8
(   76) 
(   77)         stepbymass(j,k,l)=0.25_8*dt/nodal_mass
(   78) 
(   79)       ENDDO
(   80)     ENDDO
(   81)   ENDDO
(   82) !$OMP END DO
(   83) 
(   84) !$OMP DO
(   85)   DO l=z_min,z_max+1
(   86)     DO k=y_min,y_max+1
(   87)       DO j=x_min,x_max+1
(   88) 
(   89)         xvel1(j,k,l)=xvel0(j,k,l)-stepbymass(j,k,l)*(xarea(j  ,k  ,l  )*(pressure(j  ,k  ,l  )-pressure(j-1,k  ,l  ))    &
(   90)                                                     +xarea(j  ,k-1,l  )*(pressure(j  ,k-1,l  )-pressure(j-1,k-1,l  ))    &
(   91)                                                     +xarea(j  ,k  ,l-1)*(pressure(j  ,k  ,l-1)-pressure(j-1,k  ,l-1))    &
(   92)                                                     +xarea(j  ,k-1,l-1)*(pressure(j  ,k-1,l-1)-pressure(j-1,k-1,l-1)))
(   93)       ENDDO
(   94)     ENDDO
(   95)   ENDDO
(   96) !$OMP END DO
(   97) 
(   98) !$OMP DO
(   99)   DO l=z_min,z_max+1
(  100)     DO k=y_min,y_max+1
(  101)       DO j=x_min,x_max+1
(  102) 
(  103)         yvel1(j,k,l)=yvel0(j,k,l)-stepbymass(j,k,l)*(yarea(j  ,k  ,l  )*(pressure(j  ,k  ,l  )-pressure(j  ,k-1,l  ))    &
(  104)                                                     +yarea(j-1,k  ,l  )*(pressure(j-1,k  ,l  )-pressure(j-1,k-1,l  ))    &
(  105)                                                     +yarea(j  ,k  ,l-1)*(pressure(j  ,k  ,l-1)-pressure(j  ,k-1,l-1))    &
(  106)                                                     +yarea(j-1,k  ,l-1)*(pressure(j-1,k  ,l-1)-pressure(j-1,k-1,l-1)))
(  107) 
(  108)       ENDDO






PGF90 (Version     13.5)          07/18/2014  14:45:29      page 3

(  109)     ENDDO
(  110)   ENDDO
(  111) !$OMP END DO
(  112) 
(  113) !$OMP DO
(  114)   DO l=z_min,z_max+1
(  115)     DO k=y_min,y_max+1
(  116)       DO j=x_min,x_max+1
(  117) 
(  118)         zvel1(j,k,l)=zvel0(j,k,l)-stepbymass(j,k,l)*(zarea(j  ,k  ,l  )*(pressure(j  ,k  ,l  )-pressure(j  ,k  ,l-1))    &
(  119)                                                     +zarea(j  ,k-1,l  )*(pressure(j  ,k-1,l  )-pressure(j  ,k-1,l-1))    &
(  120)                                                     +zarea(j-1,k  ,l  )*(pressure(j-1,k  ,l  )-pressure(j-1,k  ,l-1))    &
(  121)                                                     +zarea(j-1,k-1,l  )*(pressure(j-1,k-1,l  )-pressure(j-1,k-1,l-1)))
(  122) 
(  123)       ENDDO
(  124)     ENDDO
(  125)   ENDDO
(  126) !$OMP END DO
(  127) 
(  128) !$OMP DO
(  129)   DO l=z_min,z_max+1
(  130)     DO k=y_min,y_max+1
(  131)       DO j=x_min,x_max+1
(  132) 
(  133)         xvel1(j,k,l)=xvel1(j,k,l)-stepbymass(j,k,l)*(xarea(j  ,k  ,l  )*(viscosity(j  ,k  ,l  )-viscosity(j-1,k  ,l  ))    &
(  134)                                                     +xarea(j  ,k-1,l  )*(viscosity(j  ,k-1,l  )-viscosity(j-1,k-1,l  ))    &
(  135)                                                     +xarea(j  ,k  ,l-1)*(viscosity(j  ,k  ,l-1)-viscosity(j-1,k  ,l-1))    &
(  136)                                                     +xarea(j  ,k-1,l-1)*(viscosity(j  ,k-1,l-1)-viscosity(j-1,k-1,l-1)))
(  137) 
(  138)       ENDDO
(  139)     ENDDO
(  140)   ENDDO
(  141) !$OMP END DO
(  142) 
(  143) !$OMP DO
(  144)   DO l=z_min,z_max+1
(  145)     DO k=y_min,y_max+1
(  146)       DO j=x_min,x_max+1
(  147) 
(  148)         yvel1(j,k,l)=yvel1(j,k,l)-stepbymass(j,k,l)*(yarea(j  ,k  ,l  )*(viscosity(j  ,k  ,l  )-viscosity(j  ,k-1,l  ))    &
(  149)                                                     +yarea(j-1,k  ,l  )*(viscosity(j-1,k  ,l  )-viscosity(j-1,k-1,l  ))    &
(  150)                                                     +yarea(j  ,k  ,l-1)*(viscosity(j  ,k  ,l-1)-viscosity(j  ,k-1,l-1))    &
(  151)                                                     +yarea(j-1,k  ,l-1)*(viscosity(j-1,k  ,l-1)-viscosity(j-1,k-1,l-1)))
(  152)       ENDDO
(  153)     ENDDO
(  154)   ENDDO
(  155) !$OMP END DO
(  156) 
(  157) !$OMP DO
(  158)   DO l=z_min,z_max+1
(  159)     DO k=y_min,y_max+1
(  160)       DO j=x_min,x_max+1
(  161) 
(  162)         zvel1(j,k,l)=zvel1(j,k,l)-stepbymass(j,k,l)*(zarea(j  ,k  ,l  )*(viscosity(j  ,k  ,l  )-viscosity(j  ,k  ,l-1))    &
(  163)                                                     +zarea(j  ,k-1,l  )*(viscosity(j  ,k-1,l  )-viscosity(j  ,k-1,l-1))    &
(  164)                                                     +zarea(j-1,k  ,l  )*(viscosity(j-1,k  ,l  )-viscosity(j-1,k  ,l-1))    &
(  165)                                                     +zarea(j-1,k-1,l  )*(viscosity(j-1,k-1,l  )-viscosity(j-1,k-1,l-1)))
(  166) 






PGF90 (Version     13.5)          07/18/2014  14:45:29      page 4

(  167)       ENDDO
(  168)     ENDDO
(  169)   ENDDO
(  170) !$OMP END DO
(  171) 
(  172) !$OMP END PARALLEL
(  173) 
(  174) END SUBROUTINE accelerate_kernel
(  175) 
(  176) END MODULE accelerate_kernel_module
