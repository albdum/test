


PGF90 (Version     13.5)          07/18/2014  14:45:24      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: ideal_gas.f90

(    1) !Crown Copyright 2012 AWE.
(    2) !
(    3) ! This file is part of CloverLeaf.
(    4) !
(    5) ! CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) ! the terms of the GNU General Public License as published by the 
(    7) ! Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) ! any later version.
(    9) !
(   10) ! CloverLeaf is distributed in the hope that it will be useful, but 
(   11) ! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) ! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) ! details.
(   14) !
(   15) ! You should have received a copy of the GNU General Public License along with 
(   16) ! CloverLeaf. If not, see http://www.gnu.org/licenses/.
(   17) 
(   18) !>  @brief Ideal gas kernel driver
(   19) !>  @author Wayne Gaudin
(   20) !>  @details Invokes the user specified kernel for the ideal gas equation of
(   21) !>  state using the specified time level data.
(   22) 
(   23) MODULE ideal_gas_module
(   24) 
(   25) CONTAINS
(   26) 
(   27) SUBROUTINE ideal_gas(chunk,predict)
(   28) 
(   29)   USE clover_module
(   30)   USE ideal_gas_kernel_module
(   31) 
(   32)   IMPLICIT NONE
(   33) 
(   34)   INTEGER :: chunk
(   35) 
(   36)   LOGICAl :: predict
(   37) 
(   38)   IF(chunks(chunk)%task .EQ. parallel%task) THEN
(   39) 
(   40)     IF(.NOT.predict) THEN
(   41)       IF(use_fortran_kernels)THEN
(   42)         CALL ideal_gas_kernel(chunks(chunk)%field%x_min,    &
(   43)                             chunks(chunk)%field%x_max,      &
(   44)                             chunks(chunk)%field%y_min,      &
(   45)                             chunks(chunk)%field%y_max,      &
(   46)                             chunks(chunk)%field%z_min,      &
(   47)                             chunks(chunk)%field%z_max,      &
(   48)                             chunks(chunk)%field%density0,   &
(   49)                             chunks(chunk)%field%energy0,    &
(   50)                             chunks(chunk)%field%pressure,   &






PGF90 (Version     13.5)          07/18/2014  14:45:24      page 2

(   51)                             chunks(chunk)%field%soundspeed  )
(   52)       ELSEIF(use_opencl_kernels)THEN
(   53) 	CALL ideal_gas_kernel_nopredict_ocl()
(   54)       ELSEIF(use_C_kernels)THEN
(   55)         CALL ideal_gas_kernel_c(chunks(chunk)%field%x_min,  &
(   56)                             chunks(chunk)%field%x_max,      &
(   57)                             chunks(chunk)%field%y_min,      &
(   58)                             chunks(chunk)%field%y_max,      &
(   59)                             chunks(chunk)%field%z_min,      &
(   60)                             chunks(chunk)%field%z_max,      &
(   61)                             chunks(chunk)%field%density0,   &
(   62)                             chunks(chunk)%field%energy0,    &
(   63)                             chunks(chunk)%field%pressure,   &
(   64)                             chunks(chunk)%field%soundspeed  )
(   65)       ENDIF
(   66)     ELSE
(   67)       IF(use_fortran_kernels)THEN
(   68)         CALL ideal_gas_kernel(chunks(chunk)%field%x_min,    &
(   69)                             chunks(chunk)%field%x_max,      &
(   70)                             chunks(chunk)%field%y_min,      &
(   71)                             chunks(chunk)%field%y_max,      &
(   72)                             chunks(chunk)%field%z_min,      &
(   73)                             chunks(chunk)%field%z_max,      &
(   74)                             chunks(chunk)%field%density1,   &
(   75)                             chunks(chunk)%field%energy1,    &
(   76)                             chunks(chunk)%field%pressure,   &
(   77)                             chunks(chunk)%field%soundspeed  )
(   78)       ELSEIF(use_opencl_kernels)THEN
(   79) 	CALL ideal_gas_kernel_predict_ocl()
(   80)       ELSEIF(use_C_kernels)THEN
(   81)         CALL ideal_gas_kernel_c(chunks(chunk)%field%x_min,  &
(   82)                             chunks(chunk)%field%x_max,      &
(   83)                             chunks(chunk)%field%y_min,      &
(   84)                             chunks(chunk)%field%y_max,      &
(   85)                             chunks(chunk)%field%z_min,      &
(   86)                             chunks(chunk)%field%z_max,      &
(   87)                             chunks(chunk)%field%density1,   &
(   88)                             chunks(chunk)%field%energy1,    &
(   89)                             chunks(chunk)%field%pressure,   &
(   90)                             chunks(chunk)%field%soundspeed  )
(   91)       ENDIF
(   92)     ENDIF
(   93) 
(   94)   ENDIF
(   95) 
(   96) END SUBROUTINE ideal_gas
(   97) 
(   98) END MODULE ideal_gas_module
