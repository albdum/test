PGC Version 13.5          07/18/2014  14:45:37      page 1


Switches: -list -object -noxref -nocode -debug -nosingle
          -opt 2  -inform severe   
          -noes 
          -def unix
          -def __unix
          -def __unix__
          -def linux
          -def __linux
          -def __linux__
          -def __NO_MATH_INLINES
          -def __x86_64
          -def __x86_64__
          -def __LONG_MAX__=9223372036854775807L
          -def __SIZE_TYPE__=unsigned long int
          -def __PTRDIFF_TYPE__=long int
          -def __THROW=
          -def __extension__=
          -def __amd_64__amd64__
          -def __k8
          -def __k8__
          -def __SSE__
          -def __MMX__
          -def __SSE2__
          -def __SSE3__
          -def __SSSE3__
          -def #machine(x86_64) #lint(off) #system(posix) #cpu(x86_64)
          -def __pgnu_vsn=40407
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
Filename: accelerate_kernel_c.c

(    1) /*Crown Copyright 2012 AWE.
(    2) *
(    3) * This file is part of CloverLeaf.
(    4) *
(    5) * CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) * the terms of the GNU General Public License as published by the 
(    7) * Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) * any later version.
(    9) *
(   10) * CloverLeaf is distributed in the hope that it will be useful, but 
(   11) * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) * details.
(   14) *
(   15) * You should have received a copy of the GNU General Public License along with 
(   16) * CloverLeaf. If not, see http://www.gnu.org/licenses/. */
(   17) 
(   18) /**
(   19)  *  @brief C acceleration kernel
(   20)  *  @author Wayne Gaudin
(   21)  *  @details The pressure and viscosity gradients are used to update the
(   22)  *  velocity field.
(   23)  */
(   24) 
(   25) #include <stdio.h>
(   26) #include <stdlib.h>
(   27) #include "ftocmacros.h"
(   28) #include <math.h>
(   29) 
(   30) void accelerate_kernel_c_(int *xmin,int *xmax,int *ymin,int *ymax,



PGC Version 13.5          07/18/2014  14:45:37      page 2


(   31)                           double *dbyt,
(   32)                           double *xarea,
(   33)                           double *yarea,
(   34)                           double *volume,
(   35)                           double *density0,
(   36)                           double *pressure,
(   37)                           double *viscosity,
(   38)                           double *xvel0,
(   39)                           double *yvel0,
(   40)                           double *xvel1,
(   41)                           double *yvel1,
(   42)                           double *stepbymass)
(   43) {
(   44)   int x_min=*xmin;
(   45)   int x_max=*xmax;
(   46)   int y_min=*ymin;
(   47)   int y_max=*ymax;
(   48)   double dt=*dbyt;
(   49) 
(   50)   int j,k,err;
(   51)   double nodal_mass;
(   52) 
(   53) #pragma omp parallel
(   54)  {
(   55) 
(   56) #pragma omp for private(nodal_mass,j)
(   57)   for (k=y_min;k<=y_max+1;k++) {
(   58) #pragma ivdep
(   59)     for (j=x_min;j<=x_max+1;j++) {
(   60)       nodal_mass=(density0[FTNREF2D(j-1,k-1,x_max+4,x_min-2,y_min-2)]*volume[FTNREF2D(j-1,k-1,x_max+4,x_min-2,y_min-2)]
(   61)                  +density0[FTNREF2D(j  ,k-1,x_max+4,x_min-2,y_min-2)]*volume[FTNREF2D(j  ,k-1,x_max+4,x_min-2,y_min-2)]
(   62)                  +density0[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]*volume[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]
(   63)                  +density0[FTNREF2D(j-1,k  ,x_max+4,x_min-2,y_min-2)]*volume[FTNREF2D(j-1,k  ,x_max+4,x_min-2,y_min-2)])
(   64)                  *0.25;
(   65)       stepbymass[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]=0.5*dt/nodal_mass;
(   66)     }
(   67)   }
(   68) 
(   69) #pragma omp for private(j)
(   70)   for (k=y_min;k<=y_max+1;k++) {
(   71) #pragma ivdep
(   72)     for (j=x_min;j<=x_max+1;j++) {
(   73)       xvel1[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]=xvel0[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(   74)                                            -stepbymass[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(   75)                                            *(xarea[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(   76)                                            *(pressure[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]-pressure[FTNREF2D(j-1,k  ,x
(   77)                                            +xarea[FTNREF2D(j  ,k-1,x_max+5,x_min-2,y_min-2)]
(   78)                                            *(pressure[FTNREF2D(j  ,k-1,x_max+4,x_min-2,y_min-2)]-pressure[FTNREF2D(j-1,k-1,x
(   79)     }
(   80)   }
(   81) 
(   82) #pragma omp for private(j)
(   83)   for (k=y_min;k<=y_max+1;k++) {
(   84) #pragma ivdep
(   85)     for (j=x_min;j<=x_max+1;j++) {
(   86)       yvel1[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]=yvel0[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(   87)                                            -stepbymass[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(   88)                                            *(yarea[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]
(   89)                                            *(pressure[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]-pressure[FTNREF2D(j  ,k-1,x
(   90)                                            +yarea[FTNREF2D(j-1,k  ,x_max+4,x_min-2,y_min-2)]



PGC Version 13.5          07/18/2014  14:45:37      page 3


(   91)                                            *(pressure[FTNREF2D(j-1,k  ,x_max+4,x_min-2,y_min-2)]-pressure[FTNREF2D(j-1,k-1,x
(   92)     }
(   93)   }
(   94) 
(   95) #pragma omp for private(j)
(   96)   for (k=y_min;k<=y_max+1;k++) {
(   97) #pragma ivdep
(   98)     for (j=x_min;j<=x_max+1;j++) {
(   99)       xvel1[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]=xvel1[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(  100)                                            -stepbymass[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(  101)                                            *(xarea[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(  102)                                            *(viscosity[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]-viscosity[FTNREF2D(j-1,k  
(  103)                                            +xarea[FTNREF2D(j  ,k-1,x_max+5,x_min-2,y_min-2)]
(  104)                                            *(viscosity[FTNREF2D(j  ,k-1,x_max+4,x_min-2,y_min-2)]-viscosity[FTNREF2D(j-1,k-1
(  105)     }
(  106)   }
(  107) 
(  108) #pragma omp for private(j)
(  109)   for (k=y_min;k<=y_max+1;k++) {
(  110) #pragma ivdep
(  111)     for (j=x_min;j<=x_max+1;j++) {
(  112)       yvel1[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]=yvel1[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(  113)                                            -stepbymass[FTNREF2D(j  ,k  ,x_max+5,x_min-2,y_min-2)]
(  114)                                            *(yarea[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]
(  115)                                            *(viscosity[FTNREF2D(j  ,k  ,x_max+4,x_min-2,y_min-2)]-viscosity[FTNREF2D(j  ,k-1
(  116)                                            +yarea[FTNREF2D(j-1,k  ,x_max+4,x_min-2,y_min-2)]
(  117)                                            *(viscosity[FTNREF2D(j-1,k  ,x_max+4,x_min-2,y_min-2)]-viscosity[FTNREF2D(j-1,k-1
(  118)     }
(  119)   }
(  120) 
(  121)  }
(  122) 
(  123) }






























