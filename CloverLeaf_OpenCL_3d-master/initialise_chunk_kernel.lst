


PGF90 (Version     13.5)          07/18/2014  14:45:16      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -idir /usr/mpi/pgi/mvapich2-1.7-qlc/include
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: initialise_chunk_kernel.f90

(    1) !Crown Copyright 2012 AWE.
(    2) !
(    3) ! This file is part of CloverLeaf.
(    4) !
(    5) ! CloverLeaf is free software: you can redistribute it and/or modify it under 
(    6) ! the terms of the GNU General Public License as published by the 
(    7) ! Free Software Foundation, either version 3 of the License, or (at your option) 
(    8) ! any later version.
(    9) !
(   10) ! CloverLeaf is distributed in the hope that it will be useful, but 
(   11) ! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
(   12) ! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
(   13) ! details.
(   14) !
(   15) ! You should have received a copy of the GNU General Public License along with 
(   16) ! CloverLeaf. If not, see http://www.gnu.org/licenses/.
(   17) 
(   18) !>  @brief Fortran chunk initialisation kernel.
(   19) !>  @author Wayne Gaudin
(   20) !>  @details Calculates mesh geometry for the mesh chunk based on the mesh size.
(   21) 
(   22) MODULE initialise_chunk_kernel_module
(   23) 
(   24) CONTAINS
(   25) 
(   26) SUBROUTINE initialise_chunk_kernel(x_min,x_max,y_min,y_max,z_min,z_max,&
(   27)                                    xmin,ymin,zmin,dx,dy,dz,            &
(   28)                                    vertexx,                            &
(   29)                                    vertexdx,                           &
(   30)                                    vertexy,                            &
(   31)                                    vertexdy,                           &
(   32)                                    vertexz,                            &
(   33)                                    vertexdz,                           &
(   34)                                    cellx,                              &
(   35)                                    celldx,                             &
(   36)                                    celly,                              &
(   37)                                    celldy,                             &
(   38)                                    cellz,                              &
(   39)                                    celldz,                             &
(   40)                                    volume,                             &
(   41)                                    xarea,                              &
(   42)                                    yarea,                              &
(   43)                                    zarea                               )
(   44) 
(   45)   IMPLICIT NONE
(   46) 
(   47)   INTEGER      :: x_min,x_max,y_min,y_max,z_min,z_max
(   48)   REAL(KIND=8) :: xmin,ymin,zmin,dx,dy,dz
(   49)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3) :: vertexx
(   50)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3) :: vertexdx






PGF90 (Version     13.5)          07/18/2014  14:45:16      page 2

(   51)   REAL(KIND=8), DIMENSION(y_min-2:y_max+3) :: vertexy
(   52)   REAL(KIND=8), DIMENSION(y_min-2:y_max+3) :: vertexdy
(   53)   REAL(KIND=8), DIMENSION(z_min-2:z_max+3) :: vertexz
(   54)   REAL(KIND=8), DIMENSION(z_min-2:z_max+3) :: vertexdz
(   55)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2) :: cellx
(   56)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2) :: celldx
(   57)   REAL(KIND=8), DIMENSION(y_min-2:y_max+2) :: celly
(   58)   REAL(KIND=8), DIMENSION(y_min-2:y_max+2) :: celldy
(   59)   REAL(KIND=8), DIMENSION(z_min-2:z_max+2) :: cellz
(   60)   REAL(KIND=8), DIMENSION(z_min-2:z_max+2) :: celldz
(   61)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2,z_min-2:z_max+2) :: volume
(   62)   REAL(KIND=8), DIMENSION(x_min-2:x_max+3 ,y_min-2:y_max+2,z_min-2:z_max+2) :: xarea
(   63)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+3,z_min-2:z_max+2) :: yarea
(   64)   REAL(KIND=8), DIMENSION(x_min-2:x_max+2 ,y_min-2:y_max+2,z_min-2:z_max+3) :: zarea
(   65) 
(   66)   INTEGER      :: j,k,l
(   67) 
(   68) !$OMP PARALLEL
(   69) !$OMP DO
(   70)   DO j=x_min-2,x_max+3
(   71)      vertexx(j)=xmin+dx*float(j-x_min)
(   72)   ENDDO
(   73) !$OMP END DO
(   74) 
(   75) !$OMP DO
(   76)   DO j=x_min-2,x_max+3
(   77)     vertexdx(j)=dx
(   78)   ENDDO
(   79) !$OMP END DO
(   80) 
(   81) !$OMP DO
(   82)   DO k=y_min-2,y_max+3
(   83)      vertexy(k)=ymin+dy*float(k-y_min)
(   84)   ENDDO
(   85) !$OMP END DO
(   86) 
(   87) !$OMP DO
(   88)   DO k=y_min-2,y_max+3
(   89)     vertexdy(k)=dy
(   90)   ENDDO
(   91) !$OMP END DO
(   92) 
(   93) !$OMP DO
(   94)   DO l=z_min-2,z_max+3
(   95)      vertexz(l)=zmin+dz*float(l-z_min)
(   96)   ENDDO
(   97) !$OMP END DO
(   98) 
(   99) !$OMP DO
(  100)   DO l=z_min-2,z_max+3
(  101)     vertexdz(l)=dz
(  102)   ENDDO
(  103) !$OMP END DO
(  104) 
(  105) !$OMP DO
(  106)   DO j=x_min-2,x_max+2
(  107)      cellx(j)=0.5*(vertexx(j)+vertexx(j+1))
(  108)   ENDDO






PGF90 (Version     13.5)          07/18/2014  14:45:16      page 3

(  109) !$OMP END DO
(  110) 
(  111) !$OMP DO
(  112)   DO j=x_min-2,x_max+2
(  113)      celldx(j)=dx
(  114)   ENDDO
(  115) !$OMP END DO
(  116) 
(  117) !$OMP DO
(  118)   DO k=y_min-2,y_max+2
(  119)      celly(k)=0.5*(vertexy(k)+vertexy(k+1))
(  120)   ENDDO
(  121) !$OMP END DO
(  122) 
(  123) !$OMP DO
(  124)   DO k=y_min-2,y_max+2
(  125)      celldy(k)=dy
(  126)   ENDDO
(  127) !$OMP END DO
(  128) 
(  129) !$OMP DO
(  130)   DO l=z_min-2,z_max+2
(  131)      cellz(l)=0.5*(vertexz(l)+vertexz(l+1))
(  132)   ENDDO
(  133) !$OMP END DO
(  134) 
(  135) !$OMP DO
(  136)   DO l=z_min-2,z_max+2
(  137)      celldz(l)=dz
(  138)   ENDDO
(  139) !$OMP END DO
(  140) 
(  141) !$OMP DO PRIVATE(j,k)
(  142)   DO l=z_min-2,z_max+2
(  143)     DO k=y_min-2,y_max+2
(  144)       DO j=x_min-2,x_max+2
(  145)         volume(j,k,l)=dx*dy*dz
(  146)       ENDDO
(  147)     ENDDO
(  148)   ENDDO
(  149) !$OMP END DO
(  150) 
(  151) !$OMP DO PRIVATE(j,k)
(  152)   DO l=z_min-2,z_max+2
(  153)     DO k=y_min-2,y_max+2
(  154)       DO j=x_min-2,x_max+2
(  155)         xarea(j,k,l)=celldy(k)*celldz(l)
(  156)       ENDDO
(  157)     ENDDO
(  158)   ENDDO
(  159) !$OMP END DO
(  160) 
(  161) !$OMP DO PRIVATE(j,k)
(  162)   DO l=z_min-2,z_max+2
(  163)     DO k=y_min-2,y_max+2
(  164)       DO j=x_min-2,x_max+2
(  165)         yarea(j,k,l)=celldx(j)*celldz(l)
(  166)       ENDDO






PGF90 (Version     13.5)          07/18/2014  14:45:16      page 4

(  167)     ENDDO
(  168)   ENDDO
(  169) !$OMP END DO
(  170) 
(  171) !$OMP DO PRIVATE(j,k)
(  172)   DO l=z_min-2,z_max+2
(  173)     DO k=y_min-2,y_max+2
(  174)       DO j=x_min-2,x_max+2
(  175)         zarea(j,k,l)=celldx(j)*celldy(k)
(  176)       ENDDO
(  177)     ENDDO
(  178)   ENDDO
(  179) !$OMP END DO
(  180) !$OMP END PARALLEL
(  181) 
(  182) END SUBROUTINE initialise_chunk_kernel
(  183) 
(  184) END MODULE initialise_chunk_kernel_module
